/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {

    runtimeOnlyNonPublishable("com.github.GTNewHorizons:NotEnoughItems:2.5.4-GTNH:dev")
    compileOnly("com.gregoriust.gregtech:gregtech_1.7.10:+:dev")
    compile fileTree(dir: 'lib', include: '*.jar')

    compile("com.github.GTNewHorizons:PolyNTM:+:dev") {

        transitive=false

    }
    compile("com.github.GTNewHorizons:GT5NEIOrePlugin:+:dev")
    compile("com.github.GTNewHorizons:PolyGT5:+:dev") {
        exclude group: 'com.github.GTNewHorizons', module: 'Galacticraft'
        exclude group: 'com.github.GTNewHorizons', module: 'polytekk'
    }
    implementation("com.github.GTNewHorizons:Avaritia:1.45:dev")
    implementation("com.github.GTNewHorizons:WitcheryExtras:1.1.14:dev")
    implementation("curse.maven:witchery-69673:2234410")
    compile("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev")
    api("com.github.GTNewHorizons:Botania:1.9.24-GTNH:dev")
    api("com.github.GTNewHorizons:BloodMagic:1.4.3:dev")

    // REIKA MOD DEPS
    // please note that while i include a way to reliably compile Reika's mods here,
    // i do NOT encourage you to compile her mods and redistribute them.
    // tl;dr: do not anger the dragoness
    runtimeOnly("com.xcompwiz:mystcraft:1.7.10-0.12.3.04:dev")
    compileOnly("com.mod-buildcraft:buildcraft:7.1.23:dev")

    runtimeOnly("com.InfinityRaider.AgriCraft:AgriCraft:1.7.10-1.5.0:dev")
    runtimeOnly("thehippomaster:AnimationAPI:1.7.10-1.2.4")
    runtimeOnly("am2:AM2:1.5.0-hotfix1")
    runtimeOnly("java.moze_intel:ProjectE:1.7.10-PE1.10.1:dev")
    runtimeOnly("pneumaticCraft:PneumaticCraft:1.7.10-1.12.7-153:userdev")
    runtimeOnly("com.github.glitchfiend.biomesoplenty:BiomesOPlenty:1.7.10-2.1.0.1465:deobf")
    runtimeOnly("dan200.computercraft:ComputerCraft:1.75")
    implementation("li.cil.oc:OpenComputers:MC1.7.10-1.7.2.1204:dev")

    compile("Reika:DragonAPI:v33a:dev")
    compile("Reika:ChromatiCraft:v33a:dev")
    compile("Reika:RotaryCraft:v33a:dev")
    compile("Reika:ReactorCraft:v33a:dev")

    //Greg dependencies...

    compileOnly "inventorytweaks:InventoryTweaks:1.59-dev:deobf"
    compileOnly "net.electricalage.eln:ElectricalAge-jrddunbr:1.16.3:dev"
    compileOnly "net.sengir.forestry:forestry_1.7.10:4.2.16.64:dev"
    compileOnly "com.mod-buildcraft:buildcraft:7.1.23:dev"
    compileOnly "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
    compileOnly "cr0s.warpdrive:WarpDrive-1.7.10:1.4.2.1:dev"
    compileOnly "micdoodle8.mods:MicdoodleCore:1.7-3.0.12.504:Dev"
    compileOnly "micdoodle8.mods:GalacticraftCore:1.7-3.0.12.504:Dev"
    compileOnly "micdoodle8.mods:Galacticraft-Planets:1.7-3.0.12.504:Dev"
    compileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
    compileOnly "enviromine:EnviroMine:1.3.124:deobf"
    compileOnly "vazkii.botania:Botania:r1.8-250:deobf"
    compileOnly "mods.railcraft:Railcraft_1.7.10:9.12.3.0:dev"
    compileOnly "twilightforest:twilightforest:1.7.10-2.3.8dev:dev"
    compileOnly "appeng:appliedenergistics2:rv3-beta-6:dev"
    compileOnly "cofh:CoFHCore:1.7.10R3.0.4:dev"
    compileOnly "cofh:CoFHLib:1.7.10R3.0.3:dev"
    compileOnly "applecore:AppleCore:1.7.10-3.1.1:deobf"
    compileOnly "iguanaman:HungerOverhaul:1.7.10-1.0.0-basic:deobf"
    compileOnly "li.cil.oc:OpenComputers:MC1.7.10-1.7.2.1204:dev"
    compileOnly "mekanism:MekanismAll:1.7.10-9.1.1.283:dev"
    // This ComputerCraft thing is *SUCH* a hack, but ComputerCraft is... not right...  This only works because of CodeChickenCore Magic being included up above...
    compileOnly "dan200.computercraft:ComputerCraft:1.75"
    compileOnly "openblocks:OpenBlocks:1.7.10-1.6-1.7.10:deobf"
    compileOnly "openmods:OpenModsLib:1.7.10-0.10:deobf"
    compileOnly "pneumaticCraft:PneumaticCraft:1.7.10-1.12.7-153:userdev"
    compileOnly "powercrystals:MineFactoryReloaded:[1.7.10]2.8.2B1-201:dev"
    compileOnly "ic2:IC2Classic:1.2.1.8:dev"
    compileOnly "com.builtbroken:AddictedToRed:1.7.10-0.4.0b145:deobf"
    compileOnly "com.builtbroken:Assembly-Line:1.7.10-0.5.7b180:deobf-dev"
    compileOnly "com.builtbroken:BasicIndustry:1.7.10-0.1.0b162:deobf"
    compileOnly "com.builtbroken:ComeCloser:1.7.10-0.7.0b10:deobf"
    compileOnly "com.builtbroken:ICBM-classic:1.7.10-2.16.4b239:deobf"
    compileOnly "com.builtbroken:Mffs:1.7.10-4.0.0b160:deobf"
    compileOnly "com.builtbroken:MilitaryBaseDecor:1.7.10-0.1.0b203:deobf"
    compileOnly "com.builtbroken:VoltzEngine:1.7.10-1.11.0b466:deobf"
    compileOnly "com.celestek.hexcraft:HEXCraft:1.7.10-0.13.1:dev"
    compileOnly "team.chisel.ctmlib:CTMLib:MC1.7.10-1.4.1.5:deobf"
    compileOnly "team.chisel:Chisel:2.9.5.12:deobf"
    compileOnly "blusunrize:ImmersiveEngineering:0.7.7:deobf"
    compileOnly "com.rwtema.funkylocomotion:funky-locomotion-1.7.10:beta-7:deobf"


}
